name: Monthly history trim

on:
  schedule:
    - cron: "5 0 1 * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: trim-history
  cancel-in-progress: false

jobs:
  trim:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: main
          fetch-depth: 0

      - id: shas
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t COMMITS < <(git rev-list --first-parent --max-count=10 --reverse origin/main)
          if [ "${#COMMITS[@]}" -eq 0 ]; then
            echo "No commits found on main."
            exit 1
          fi
          printf "%s\n" "${COMMITS[@]}" > /tmp/keep.txt
          echo "count=${#COMMITS[@]}" >> "$GITHUB_OUTPUT"
          echo "first=${COMMITS[0]}" >> "$GITHUB_OUTPUT"
          echo "last=${COMMITS[-1]}" >> "$GITHUB_OUTPUT"

      - shell: bash
        run: |
          set -euo pipefail
          git switch --orphan new-main
          git rm -rf . >/dev/null 2>&1 || true
          mapfile -t COMMITS < /tmp/keep.txt
          FIRST="${COMMITS[0]}"
          git checkout "$FIRST" -- .
          git clean -fdx
          export GIT_AUTHOR_NAME="$(git log -1 --format=%an "$FIRST")"
          export GIT_AUTHOR_EMAIL="$(git log -1 --format=%ae "$FIRST")"
          export GIT_AUTHOR_DATE="$(git log -1 --format=%aI "$FIRST")"
          export GIT_COMMITTER_NAME="$(git log -1 --format=%cn "$FIRST")"
          export GIT_COMMITTER_EMAIL="$(git log -1 --format=%ce "$FIRST")"
          export GIT_COMMITTER_DATE="$(git log -1 --format=%cI "$FIRST")"
          MSG="$(git log -1 --format=%B "$FIRST")"
          git add -A
          git commit -m "$MSG"
          for SHA in "${COMMITS[@]:1}"; do
            git cherry-pick --allow-empty --keep-redundant-commits "$SHA"
          done
          git branch -M new-main main

      - shell: bash
        run: |
          set -euo pipefail
          git push --force --prune origin main

      - shell: bash
        run: |
          git reflog expire --expire=now --all
          git gc --prune=now --aggressive
